<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yunqi&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-24T11:24:47.602Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yunqi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【图论】求无向连通图的割点（Tarjan算法）</title>
    <link href="http://yoursite.com/2019/01/24/%E3%80%90%E5%9B%BE%E8%AE%BA%E3%80%91%E6%B1%82%E6%97%A0%E5%90%91%E8%BF%9E%E9%80%9A%E5%9B%BE%E7%9A%84%E5%89%B2%E7%82%B9%EF%BC%88Tarjan%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/24/【图论】求无向连通图的割点（Tarjan算法）/</id>
    <published>2019-01-24T07:16:42.000Z</published>
    <updated>2019-01-24T11:24:47.602Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;寒假训练开始了，发现自己真是半灌水响叮当，自己关于割点的概念完全不知道，后来找了几篇不错的博客以及翻了翻白书，白书很适合理解概念，博客给的模板代码适合借鉴。&lt;/p&gt;
&lt;h1 id=&quot;割点的概念&quot;&gt;&lt;a href=&quot;#割点的概念&quot; class=&quot;headerlink&quot; title=&quot;割点的概念&quot;&gt;&lt;/a&gt;割点的概念&lt;/h1&gt;&lt;p&gt;在&lt;strong&gt;无向连通图&lt;/strong&gt;中，如果将其中一个点以及这个点所连的所有的边都去掉，图不再连通，那么这个点成为&lt;strong&gt;割点&lt;/strong&gt;（割顶/关节点）。&lt;/p&gt;
&lt;h1 id=&quot;如何求割点&quot;&gt;&lt;a href=&quot;#如何求割点&quot; class=&quot;headerlink&quot; title=&quot;如何求割点&quot;&gt;&lt;/a&gt;如何求割点&lt;/h1&gt;&lt;p&gt;暴力的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依次删除每一个节点v&lt;/li&gt;
&lt;li&gt;DFS(BFS)判断是否连通&lt;/li&gt;
&lt;li&gt;再把节点v加入图中&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>树状数组</title>
    <link href="http://yoursite.com/2018/10/16/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/10/16/树状数组/</id>
    <published>2018-10-16T01:55:22.000Z</published>
    <updated>2018-10-16T11:11:47.286Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;树状数组不太熟悉，所以下决心写出个教程来，断断续续花了三天（可太断断续续了），听说OI选手最喜欢写树状数组（线段树）了&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们将一个数组a[]树状化，每个节点的值C[i]记录了其叶子节点的权值之和，那么树状数组C[]就维护了这个数组a[]的前缀和S[i]=a[1]+a[2]+…+a[i],树状数组利用了二进制，使其可以在O(logn)时间内对这个数组a[]进行修改和求和（与O(n)比起来效率很高）&lt;/p&gt;
&lt;p&gt;树状数组可以实现的功能有&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将一个数组树状化&lt;/li&gt;
&lt;li&gt;区间修改，如改变某一个点a[i]的值&lt;/li&gt;
&lt;li&gt;区间查询，如询问a[1]+a[2]+…+a[i]的值&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Git操作总结(一)</title>
    <link href="http://yoursite.com/2018/10/10/Git%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/10/Git操作总结/</id>
    <published>2018-10-10T14:49:34.000Z</published>
    <updated>2018-10-16T10:32:35.704Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;经久没有使用git（捂脸跑开），今天开会被czq小朋友教做人，所以欸真的需要再回顾一下git操作啊&lt;em&gt;(:зゝ∠)&lt;/em&gt;。于是上&lt;a href=&quot;https://git-scm.com/book/en/v2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git官网&lt;/a&gt;从头到尾仔仔细细看了一波（不能再废下去了啊喂（摇醒）。也相当于给自己做一个git笔记，以后有忘记的命令操作就来这里看啦。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Git是一种&lt;strong&gt;分布式版本控制系统&lt;/strong&gt;，这与常被混淆的&lt;strong&gt;Github&lt;/strong&gt;(只支持Git做版本控制的项目托管平台)是两种不同的概念。在Git中的绝大多数操作都只需要访问本地文件和资源，Git和其他版本控制系统的主要差别在于对待数据的方法，其他大部分系统以文件变更列表的方式存储信息，而Git更像是把数据看作是一组快照，每次提交修改和更新时对这个文件制作一个快照并保存这个快照的索引(其中以文件内容的哈希值来作为索引)。&lt;/p&gt;
&lt;p&gt;由于git的使用非常灵活，在实践过程中便衍生出很多种不同的工作流程和协作方式。Git有多种使用方式，强烈建议使用命令行模式。Git安装跳过，请自行使用强大的搜索引擎。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
